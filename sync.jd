// DentalOS Realtime Sync (Supabase + IndexedDB + Outbox)
import { saveRecord } from '/backup.js';

const SUPABASE_URL = 'https://YOUR-PROJECT.supabase.co';   // ← جایگزین کن
const SUPABASE_ANON = 'YOUR-ANON-KEY';                     // ← جایگزین کن

// بارگذاری کلاینت از CDN اگر موجود نبود
if (!window.supabase) {
  const s = document.createElement('script');
  s.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';
  document.head.appendChild(s);
  await new Promise(r => s.onload = r);
}
const { createClient } = window.supabase;
export const sb = createClient(SUPABASE_URL, SUPABASE_ANON);

// ---------- IndexedDB محلی برای کش + Outbox ----------
const DBN='dentalos-sync', VER=1;
function idb(){ return new Promise((ok,er)=>{ const r=indexedDB.open(DBN,VER);
  r.onupgradeneeded=()=>{const db=r.result;
    if(!db.objectStoreNames.contains('prices')) db.createObjectStore('prices',{keyPath:'id'});
    if(!db.objectStoreNames.contains('outbox')) db.createObjectStore('outbox',{keyPath:'_id', autoIncrement:true});
  };
  r.onsuccess=()=>ok(r.result); r.onerror=()=>er(r.error);
});}

async function idbPut(store, obj){ const db=await idb(); const tx=db.transaction(store,'readwrite'); tx.objectStore(store).put(obj); await new Promise(r=>tx.oncomplete=r); db.close(); }
async function idbBulkPut(store, arr){ const db=await idb(); const tx=db.transaction(store,'readwrite'); const st=tx.objectStore(store); arr.forEach(x=>st.put(x)); await new Promise(r=>tx.oncomplete=r); db.close(); }
async function idbAll(store){ const db=await idb(); const tx=db.transaction(store,'readonly'); const st=tx.objectStore(store); const all=[]; st.openCursor().onsuccess=e=>{const c=e.target.result; if(c){all.push(c.value); c.continue();}}; await new Promise(r=>tx.oncomplete=r); db.close(); return all; }
async function idbClear(store){ const db=await idb(); const tx=db.transaction(store,'readwrite'); tx.objectStore(store).clear(); await new Promise(r=>tx.oncomplete=r); db.close(); }

// ---------- ورود ساده (برای شروع: یک حساب مشترک منشی/دکتر) ----------
export async function signIn(email, password){
  const { error } = await sb.auth.signInWithPassword({ email, password });
  if(error){ alert('ورود ناموفق: ' + error.message); return false; }
  return true;
}

// ---------- همگام‌سازی Prices ----------
export async function loadPricesInitial(){
  // بار اول: از سرور بگیر، کش کن، و UI را رندر کن
  const { data, error } = await sb.from('prices').select('*').order('name');
  if(!error){ await idbClear('prices'); await idbBulkPut('prices', data); renderPrices(); }
}

export function subscribePricesRealtime(){
  // هر تغییری روی سرور، فوری روی همه یوزرها می‌آید
  sb.channel('prices-all')
    .on('postgres_changes', { event: '*', schema: 'public', table: 'prices' }, async payload=>{
      const row = payload.new || payload.old;
      await idbPut('prices', row);
      renderPrices();
    })
    .subscribe();
}

export async function upsertPrice(row){
  // آفلاین: اول در Outbox ذخیره کن
  row.updated_at = new Date().toISOString();
  await idbPut('prices', row);
  renderPrices();
  await idbPut('outbox', {kind:'prices.upsert', row, ts:Date.now()});
  await saveRecord('prices_edit', row); // برای لاگ بک‌آپ
  flushOutbox(); // تلاش برای ارسال
}

async function flushOutbox(){
  if(!navigator.onLine) return;
  const items = await idbAll('outbox');
  for(const it of items){
    try{
      if(it.kind==='prices.upsert'){
        const { error } = await sb.from('prices').upsert(it.row);
        if(error) throw error;
      }
      // حذف مورد از outbox
      const db=await idb(); const tx=db.transaction('outbox','readwrite');
      tx.objectStore('outbox').delete(it._id); await new Promise(r=>tx.oncomplete=r); db.close();
    }catch(e){ /* شکست => در صف بماند */ }
  }
}

// هنگام آنلاین شدن دوباره، صف ارسال شود
window.addEventListener('online', flushOutbox);

// ---------- رندر خیلی ساده (جایگزین با UI خودت) ----------
async function renderPrices(){
  const list = await idbAll('prices');
  const el = document.querySelector('#prices-list');
  if(!el) return;
  el.innerHTML = list.map(p=>`<li>${p.name} — ${Number(p.amount).toLocaleString()} تومان</li>`).join('');
}

// شروع کار
export async function startSync(){
  await loadPricesInitial();
  subscribePricesRealtime();
  flushOutbox();
}
